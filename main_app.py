import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from PIL import Image, ImageTk
import cv2
import threading
import time
import os
import logging
from datetime import datetime
import math
from tkcalendar import DateEntry
from payment import PaymentManager
import urllib.request
import paho.mqtt.client as mqtt
import json
import smtplib
from email.mime.text import MIMEText

LPR_AVAILABLE = False
try:
    from QUET_BSX import OptimizedLPR
    LPR_AVAILABLE = True
except ImportError:
    logging.warning("Th∆∞ vi·ªán QUET_BSX kh√¥ng t√¨m th·∫•y. Ch·ª©c nƒÉng nh·∫≠n d·∫°ng bi·ªÉn s·ªë s·∫Ω b·ªã v√¥ hi·ªáu h√≥a.")

class MainApplication:
    def __init__(self, root, db_connection):
        self.root = root
        self.db = db_connection
        self.lpr_system = None
        if LPR_AVAILABLE:
            self.lpr_system = OptimizedLPR()
        self.current_user = None
        self.current_screen = None
        self.vid_in, self.vid_out = None, None
        self.latest_frame_in = None
        self.latest_frame_out = None
        self.frame_lock_in = threading.Lock()
        self.frame_lock_out = threading.Lock()
        self.camera_thread_in = None
        self.camera_thread_out = None
        self.is_running = False
        self.current_frame_in, self.current_frame_out = None, None
        self._camera_update_id = None
        self.active_vehicle_id = None
        self.payment_config = {
            #'script_url': 'https://script.google.com/macros/s/AKfycbxchRS9MGnEfn2SC_56vLhX04Hz_5BsN0VDQs4P8bN07dzOyd2S5rqHO9efTJcPbisi/exec',
            'sepay_api_url': 'http://localhost:3000/api/lsgd',
            'bank_id': 'MB',
            'account_no': '0396032433',
            'account_name': 'NGO VAN CHIEU',
            'max_wait_time': 300
        }
        self.payment_manager = PaymentManager(self.payment_config)
        def test_sepay_async():
            if hasattr(self.payment_manager, 'test_sepay_connection'):
                if self.payment_manager.test_sepay_connection():
                    logging.info("‚úÖ SePay API connection verified!")
                else:
                    logging.warning("‚ö†Ô∏è SePay API connection failed - payments may not work")
        
        threading.Thread(target=test_sepay_async, daemon=True).start()
        self.mqtt_client = mqtt.Client(client_id="XParking", clean_session=True)
        self.mqtt_client.on_connect = self.on_mqtt_connect
        self.mqtt_client.on_message = self.on_mqtt_message
        self.mqtt_client.on_disconnect = self.on_mqtt_disconnect
        
        self.mqtt_client.reconnect_delay_set(min_delay=1, max_delay=120)
        
        threading.Thread(target=self.start_mqtt_client, daemon=True).start()
        
        self.email_var = tk.StringVar(value="athanhphuc7102005@gmail.com")
        
        if not os.path.exists('anh'):
            os.makedirs('anh')
            
        logging.basicConfig(level=logging.DEBUG, format='%(levelname)s - %(message)s')
        
        self.parking_status = {
            "slots_total": 3,
            "slots_occupied": 0,
            "current_operation": "idle",
            "is_full": False,
            "barrier_in_open": False,
            "barrier_out_open": False
        }
        
        self.mqtt_command_queue = []
        self.mqtt_queue_lock = threading.Lock()
        self.mqtt_last_publish_time = 0
        
        threading.Thread(target=self.process_mqtt_command_queue, daemon=True).start()
    
    def start_mqtt_client(self):
        while True:
            try:
                self.mqtt_client.connect("192.168.1.80", 1883, 60)
                self.mqtt_client.loop_forever()
            except Exception as e:
                logging.error(f"MQTT connection error: {e}. Retrying in 5 seconds...")
                time.sleep(5)
    
    def on_mqtt_connect(self, client, userdata, flags, rc):
        if rc == 0:
            logging.info("Connected to MQTT Broker!")
            client.subscribe("parking/data", qos=1)
            client.subscribe("parking/alert", qos=1)
            client.publish("parking/status", "APP_CONNECTED", qos=1, retain=True)
        else:
            logging.error(f"Failed to connect to MQTT broker with result code {rc}")
    
    def on_mqtt_disconnect(self, client, userdata, rc):
        logging.warning(f"Disconnected from MQTT broker with result code {rc}")
    
    def publish_mqtt_command(self, topic, payload, qos=1, retain=False):
        with self.mqtt_queue_lock:
            self.mqtt_command_queue.append((topic, payload, qos, retain))
    
    def process_mqtt_command_queue(self):
        min_interval = 0.1
        
        while True:
            command = None
            with self.mqtt_queue_lock:
                if self.mqtt_command_queue and time.time() - self.mqtt_last_publish_time >= min_interval:
                    command = self.mqtt_command_queue.pop(0)
                    self.mqtt_last_publish_time = time.time()
            
            if command:
                topic, payload, qos, retain = command
                try:
                    self.mqtt_client.publish(topic, payload, qos=qos, retain=retain)
                    logging.debug(f"Published to {topic}: {payload}")
                except Exception as e:
                    logging.error(f"Error publishing to MQTT: {e}")
                    with self.mqtt_queue_lock:
                        self.mqtt_command_queue.insert(0, command)
            
            time.sleep(0.05)
    
    def on_mqtt_message(self, client, userdata, msg):
        try:
            data = json.loads(msg.payload.decode())
            event = data.get('event')
            
            if not event:
                logging.warning(f"Received MQTT message without event field: {data}")
                return
                
            logging.info(f"MQTT message received: {event}")
            
            if event == "RFID_IN_SUCCESS":
                rfid = data.get('rfid')
                if rfid:
                    self.root.after(0, lambda: self.info_vars["ID Th·∫ª:"].set(rfid))
                    self.root.after(0, self.start_plate_recognition_in)
                    
            elif event == "RFID_OUT_SUCCESS":
                rfid = data.get('rfid')
                if rfid:
                    self.root.after(0, lambda: self.info_vars["ID Th·∫ª:"].set(rfid))
                    self.root.after(0, self.validate_rfid_for_exit, rfid)  # Ki·ªÉm tra RFID tr∆∞·ªõc khi ch·ª•p BSX
                    
            elif event == "BARRIER_IN_OPENED":
                self.parking_status["barrier_in_open"] = True
                self.root.after(0, lambda: self.btn_barrier_in.config(
                    text="ƒê√ìNG BARRIER V√ÄO", 
                    style='Danger.TButton', 
                    state=tk.NORMAL
                ))
                
            elif event == "BARRIER_OUT_OPENED":
                self.parking_status["barrier_out_open"] = True
                self.root.after(0, lambda: self.btn_barrier_out.config(
                    text="ƒê√ìNG BARRIER RA", 
                    style='Danger.TButton', 
                    state=tk.NORMAL
                ))
                
            elif event == "BARRIER_IN_CLOSED":
                self.parking_status["barrier_in_open"] = False
                self.root.after(0, lambda: self.btn_barrier_in.config(
                    text="M·ªû BARRIER V√ÄO", 
                    style='Success.TButton', 
                    state=tk.NORMAL
                ))
                
            elif event == "BARRIER_OUT_CLOSED":
                self.parking_status["barrier_out_open"] = False
                self.root.after(0, lambda: self.btn_barrier_out.config(
                    text="M·ªû BARRIER RA", 
                    style='Primary.TButton', 
                    state=tk.NORMAL
                ))
                
            elif event == "ALERT":
                alert_type = data.get('type', event)
                # G·ª≠i email c·∫£nh b√°o v·ªõi th√¥ng tin chi ti·∫øt
                if alert_type == "SMOKE_DETECTED":
                    smoke_value = data.get('smoke_value', 'Unknown')
                    email_subject = f"üî• [C·∫¢NH B√ÅO KH√ìI] X PARKING"
                    email_body = f"""
C·∫¢NH B√ÅO KH√ìI PH√ÅT HI·ªÜN!

Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Gi√° tr·ªã c·∫£m bi·∫øn: {smoke_value}
Ng∆∞·ª°ng c·∫£nh b√°o: 900
Lo·∫°i c·∫£nh b√°o: {alert_type}
Tr·∫°ng th√°i: KH·∫®N C·∫§P

Vui l√≤ng ki·ªÉm tra h·ªá th·ªëng ngay l·∫≠p t·ª©c!

---
H·ªá th·ªëng b√£i xe th√¥ng minh X PARKING
                    """
                else:
                    email_subject = f"‚ö†Ô∏è [C·∫¢NH B√ÅO] X PARKING"
                    email_body = f"""
C·∫¢NH B√ÅO H·ªÜ TH·ªêNG!

Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Lo·∫°i c·∫£nh b√°o: {alert_type}
Tr·∫°ng th√°i: KH·∫®N C·∫§P

Vui l√≤ng ki·ªÉm tra h·ªá th·ªëng ngay l·∫≠p t·ª©c!

---
H·ªá th·ªëng b√£i xe th√¥ng minh X PARKING
                    """
                    
                self.send_email(email_subject, email_body)
                self.root.after(0, lambda: self.info_vars["Tr·∫°ng Th√°i:"].set(f"üö® C·∫¢NH B√ÅO: {alert_type}"))
                
            elif event == "SMOKE_SENSOR_DATA":
                # X·ª≠ l√Ω d·ªØ li·ªáu c·∫£m bi·∫øn kh√≥i
                smoke_value = data.get('value', 0)
                smoke_status = data.get('status', 'NORMAL')
                threshold = data.get('threshold', 900)
                
                logging.info(f"Smoke sensor: {smoke_value} (Threshold: {threshold}) - Status: {smoke_status}")
                
                # C·∫≠p nh·∫≠t giao di·ªán v·ªõi th√¥ng tin c·∫£m bi·∫øn kh√≥i
                if smoke_status == "DETECTED":
                    self.root.after(0, lambda: self.info_vars["Tr·∫°ng Th√°i:"].set(f"üî• KH√ìI: {smoke_value}"))
                else:
                    # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu kh√¥ng c√≥ c·∫£nh b√°o kh√°c
                    current_status = self.info_vars["Tr·∫°ng Th√°i:"].get()
                    if "üî•" in current_status or "üö®" not in current_status:
                        self.root.after(0, lambda: self.info_vars["Tr·∫°ng Th√°i:"].set("S·∫¥N S√ÄNG"))
                
            elif event == "SMOKE_CLEARED":
                logging.info("Smoke cleared - returning to normal operation")
                self.root.after(0, lambda: self.info_vars["Tr·∫°ng Th√°i:"].set("S·∫¥N S√ÄNG - Kh√≥i ƒë√£ h·∫øt"))
                
                # G·ª≠i email th√¥ng b√°o kh√≥i ƒë√£ h·∫øt
                email_subject = "‚úÖ [TH√îNG B√ÅO] Kh√≥i ƒë√£ h·∫øt - X PARKING"
                email_body = f"""
TH√îNG B√ÅO: T√åNH TR·∫†NG KH√ìI ƒê√É K·∫æT TH√öC

Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Tr·∫°ng th√°i: B√¨nh th∆∞·ªùng
C·∫£m bi·∫øn kh√≥i: ƒê√£ tr·ªü v·ªÅ m·ª©c an to√†n

H·ªá th·ªëng ƒë√£ tr·ªü l·∫°i ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.

---
H·ªá th·ªëng b√£i xe th√¥ng minh X PARKING
                """
                self.send_email(email_subject, email_body)
                
            elif event == "RFID_MISMATCH_OUT":
                self.root.after(0, lambda: self.info_vars["Tr·∫°ng Th√°i:"].set("‚ùå RFID kh√¥ng kh·ªõp"))
                logging.warning("RFID mismatch detected during car exit")
                
            elif event == "VEHICLE_NOT_FOUND_OUT":
                self.root.after(0, lambda: self.info_vars["Tr·∫°ng Th√°i:"].set("‚ùå Xe kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng"))
                logging.warning("Vehicle not found in database")

        except json.JSONDecodeError:
            logging.error(f"Failed to decode MQTT message: {msg.payload}")
        except Exception as e:
            logging.error(f"MQTT message error: {e}")

    def send_email(self, subject, body):
        def send_async():
            try:
                smtp_server = "smtp.gmail.com"
                smtp_port = 587
                sender_email = "Acc13422@gmail.com"
                sender_password = "dvdultkxshztqwth"
                recipient_email = self.email_var.get()
                
                if not recipient_email or recipient_email == "....." or "@" not in recipient_email:
                    logging.warning("No valid email recipient configured or recipient email is default placeholder.")
                    return
                    
                msg = MIMEText(body)
                msg['Subject'] = subject
                msg['From'] = sender_email
                msg['To'] = recipient_email
                
                with smtplib.SMTP(smtp_server, smtp_port) as server:
                    server.starttls()
                    server.login(sender_email, sender_password)
                    server.sendmail(sender_email, recipient_email, msg.as_string())
                    
                logging.info(f"Email sent successfully: {subject}")
            except Exception as e:
                logging.error(f"Failed to send email: {e}")
        
        threading.Thread(target=send_async, daemon=True).start()

    def validate_rfid_for_exit(self, rfid):
        logging.debug(f"Validating RFID for exit: {rfid}")
        
        # Ki·ªÉm tra k·∫øt n·ªëi database
        if not self.db or not hasattr(self.db, 'connection') or not self.db.connection:
            logging.error("Database connection is not available")
            messagebox.showerror("L·ªói k·∫øt n·ªëi", "M·∫•t k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng.")
            return
        
        try:
            # T√¨m th√¥ng tin xe theo RFID
            vehicle_data = None
            
            # Th·ª≠ s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c find_active_vehicle_by_rfid n·∫øu c√≥
            if hasattr(self.db, 'find_active_vehicle_by_rfid'):
                vehicle_data = self.db.find_active_vehicle_by_rfid(rfid.upper())
            
            # N·∫øu kh√¥ng t√¨m th·∫•y ho·∫∑c ph∆∞∆°ng th·ª©c kh√¥ng t·ªìn t·∫°i, th·ª≠ truy v·∫•n tr·ª±c ti·∫øp
            if not vehicle_data:
                try:
                    # ƒê·∫£m b·∫£o k·∫øt n·ªëi
                    if hasattr(self.db, '_check_connection'):
                        self.db._check_connection()
                    
                    # Truy v·∫•n tr·ª±c ti·∫øp
                    query = """
                    SELECT id, license_plate, rfid_id, entry_time 
                    FROM parking_history 
                    WHERE rfid_id = %s AND status = 'Trong b√£i' 
                    ORDER BY entry_time DESC 
                    LIMIT 1
                    """
                    self.db.cursor.execute(query, (rfid.upper(),))
                    vehicle_data = self.db.cursor.fetchone()
                except Exception as e:
                    logging.error(f"Error with direct query: {e}")
            
            # Ki·ªÉm tra n·∫øu kh√¥ng t√¨m th·∫•y xe
            if not vehicle_data:
                logging.warning(f"RFID {rfid} not found in active vehicles")
                messagebox.showerror("L·ªói", f"RFID {rfid} ch∆∞a c√≥ th√¥ng tin xe v√†o trong h·ªá th·ªëng.")
                self.publish_mqtt_command("parking/command", "VEHICLE_NOT_FOUND_OUT")
                self.reset_info_panel()
                return
            
            # L∆∞u th√¥ng tin xe
            self.active_vehicle_id = vehicle_data[0]
            db_plate = vehicle_data[1]
            db_rfid = vehicle_data[2]
            entry_time_str = vehicle_data[3]
            logging.debug(f"Found vehicle for RFID {rfid}: Plate={db_plate}, Entry={entry_time_str}")
            
            # Hi·ªÉn th·ªã th√¥ng tin xe
            self.info_vars["ID Th·∫ª:"].set(db_rfid)
            self.info_vars["Bi·ªÉn S·ªë Xe:"].set(db_plate)
            self.info_vars["Tr·∫°ng Th√°i:"].set("ƒêang qu√©t bi·ªÉn s·ªë ra...")
            
            # B·∫Øt ƒë·∫ßu qu√©t bi·ªÉn s·ªë
            self.start_plate_recognition_out()
            
        except Exception as e:
            logging.error(f"Error in validate_rfid_for_exit: {e}")
            messagebox.showerror("L·ªói", "X·∫£y ra l·ªói khi x√°c th·ª±c RFID. Vui l√≤ng th·ª≠ l·∫°i.")
            self.reset_info_panel()

    def start_plate_recognition_in(self):
        self.info_vars["Tr·∫°ng Th√°i:"].set("ƒêang qu√©t bi·ªÉn s·ªë xe v√†o...")
        
        frame = self.current_frame_in
        if frame is None:
            self.publish_mqtt_command("parking/command", "PLATE_SCAN_FAIL_IN")
            messagebox.showwarning("L·ªói", "Kh√¥ng c√≥ h√¨nh ·∫£nh t·ª´ camera v√†o.")
            self.reset_info_panel()
            return
        
        threading.Thread(target=self._process_car_entry_thread, args=(frame,), daemon=True).start()

    def start_plate_recognition_out(self):
        self.info_vars["Tr·∫°ng Th√°i:"].set("ƒêang qu√©t bi·ªÉn s·ªë xe ra...")
        
        frame = self.current_frame_out
        if frame is None:
            self.publish_mqtt_command("parking/command", "PLATE_SCAN_FAIL_OUT")
            messagebox.showwarning("L·ªói", "Kh√¥ng c√≥ h√¨nh ·∫£nh t·ª´ camera ra.")
            self.reset_info_panel()
            return
        
        threading.Thread(target=self._process_car_exit_thread, args=(frame,), daemon=True).start()
        
    def _process_car_entry_thread(self, frame):
        if self.parking_status["current_operation"] != "idle":
            logging.warning("Already processing another operation, skipping car entry LPR.")
            self.publish_mqtt_command("parking/command", "PLATE_SCAN_FAIL_IN")
            return

        self.parking_status["current_operation"] = "entry"
        self.root.after(0, lambda: self.info_vars["Tr·∫°ng Th√°i:"].set("ƒêang nh·∫≠n d·∫°ng bi·ªÉn s·ªë v√†o..."))

        plate_text = self.detect_license_plate(frame, self.plate_in_canvas, self.plate_in_var)
        
        if plate_text:
            self.root.after(0, self.finalize_car_entry, plate_text, frame)
        else:
            self.publish_mqtt_command("parking/command", "PLATE_SCAN_FAIL_IN")
            self.root.after(0, lambda: messagebox.showerror("L·ªói nh·∫≠n d·∫°ng", "Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c bi·ªÉn s·ªë xe. Vui l√≤ng th·ª≠ l·∫°i."))
            
        self.parking_status["current_operation"] = "idle"

    def finalize_car_entry(self, plate_text, frame):
        existing_vehicle = self.db.find_active_vehicle(plate_text.upper())
        if existing_vehicle:
            messagebox.showerror("L·ªói", f"Xe {plate_text.upper()} ƒë√£ c√≥ trong b√£i!")
            self.publish_mqtt_command("parking/command", "PLATE_SCAN_FAIL_IN")
            self.reset_info_panel()
            return
            
        if self.parking_status["is_full"]:
            messagebox.showerror("B√£i ƒë·∫ßy", "B√£i xe ƒë√£ ƒë·∫ßy, kh√¥ng th·ªÉ ti·∫øp nh·∫≠n th√™m xe!")
            self.publish_mqtt_command("parking/command", "PLATE_SCAN_FAIL_IN")
            self.reset_info_panel()
            return
        
        plate_text = plate_text.upper()
        entry_time = datetime.now()
        
        image_name = f"VAO_{plate_text.replace('.', '')}_{entry_time.strftime('%Y%m%d%H%M%S')}.jpg"
        image_path = os.path.join('anh', image_name)
        try:
            cv2.imwrite(image_path, frame)
            logging.info(f"Entry image saved successfully at: {image_path}")
        except Exception as e:
            logging.error(f"Failed to save entry image: {e}")
            image_path = ""
        
        rfid = self.info_vars["ID Th·∫ª:"].get()
        if rfid == "....." or not rfid:
            rfid = f"RFID_{int(time.time())}"
            self.info_vars["ID Th·∫ª:"].set(rfid)
        
        try:
            self.active_vehicle_id = self.db.log_car_entry(plate_text, rfid, entry_time, image_path, self.current_user['name'])
            if self.active_vehicle_id is None:
                raise ValueError("log_car_entry returned None - DB insert failed")
            logging.info(f"DB entry logged successfully for vehicle {plate_text} with ID: {self.active_vehicle_id}")
        except Exception as e:
            logging.error(f"Database error during car entry: {e}")
            messagebox.showerror("L·ªói c∆° s·ªü d·ªØ li·ªáu", "Kh√¥ng th·ªÉ l∆∞u th√¥ng tin xe v√†o c∆° s·ªü d·ªØ li·ªáu! Ki·ªÉm tra k·∫øt n·ªëi MySQL ho·∫∑c log l·ªói.")
            self.reset_info_panel()
            return
        
        self.info_vars["Bi·ªÉn S·ªë Xe:"].set(plate_text)
        self.info_vars["Tr·∫°ng Th√°i:"].set("Xe v√†o")
        self.info_vars["Th·ªùi gian:"].set(entry_time.strftime('%Y-%m-%d %H:%M:%S'))
        self.info_vars["T·ªïng gi·ªù g·ª≠i:"].set("...")
        self.info_vars["T·ªïng Ph√≠:"].set("...")
        self.info_vars["Tr·∫°ng Th√°i Thanh To√°n:"].set("...")
        
        self.publish_mqtt_command("parking/command", "PLATE_SCAN_SUCCESS_IN")
        
        logging.info(f"Car entry processed: {plate_text}, RFID: {rfid}")
        self.root.after(2000, self.reset_info_panel)

    def _process_car_exit_thread(self, frame):
        if self.parking_status["current_operation"] != "idle":
            logging.warning("Already processing another operation, skipping car exit LPR.")
            self.publish_mqtt_command("parking/command", "PLATE_SCAN_FAIL_OUT")
            return
        
        self.parking_status["current_operation"] = "exit"
        self.root.after(0, lambda: self.info_vars["Tr·∫°ng Th√°i:"].set("ƒêang nh·∫≠n d·∫°ng bi·ªÉn s·ªë ra..."))

        plate_text = self.detect_license_plate(frame, self.plate_out_canvas, self.plate_out_var)
        
        if plate_text:
            self.root.after(0, self.finalize_car_exit, plate_text, frame)
        else:
            self.publish_mqtt_command("parking/command", "PLATE_SCAN_FAIL_OUT")
            self.root.after(0, lambda: messagebox.showerror("L·ªói nh·∫≠n d·∫°ng", "Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c bi·ªÉn s·ªë xe. Vui l√≤ng th·ª≠ l·∫°i."))
            self.parking_status["current_operation"] = "idle"

    def finalize_car_exit(self, plate_text, frame):
        logging.debug(f"Starting finalize_car_exit for plate: {plate_text}")
        
        # Ki·ªÉm tra RFID ƒë√£ ƒë∆∞·ª£c qu√©t ch∆∞a
        current_rfid = self.info_vars["ID Th·∫ª:"].get()
        if not current_rfid or current_rfid == "....." or current_rfid.strip() == "":
            logging.warning("No RFID info - cancelling exit")
            messagebox.showerror("L·ªói", "Kh√¥ng c√≥ th√¥ng tin RFID. Vui l√≤ng qu√©t th·∫ª RFID tr∆∞·ªõc.")
            self.publish_mqtt_command("parking/command", "PLATE_SCAN_FAIL_OUT")
            self.parking_status["current_operation"] = "idle"
            self.reset_info_panel()
            return
        
        # L·∫•y th√¥ng tin xe t·ª´ RFID
        vehicle_data = self.db.find_active_vehicle_by_rfid(current_rfid.upper())
        if not vehicle_data:
            logging.error(f"RFID {current_rfid} not found in active vehicles")
            messagebox.showerror("L·ªói", f"RFID {current_rfid} ch∆∞a c√≥ th√¥ng tin xe v√†o trong h·ªá th·ªëng.")
            self.publish_mqtt_command("parking/command", "VEHICLE_NOT_FOUND_OUT")
            self.parking_status["current_operation"] = "idle"
            self.reset_info_panel()
            return
        
        # L·∫•y c√°c th√¥ng tin c·ªßa xe t·ª´ database
        self.active_vehicle_id = vehicle_data[0]
        db_plate = vehicle_data[1]
        db_rfid = vehicle_data[2]
        entry_time = vehicle_data[3]

        logging.debug(f"Found vehicle data: ID={self.active_vehicle_id}, Plate={db_plate}, RFID={db_rfid}, Entry={entry_time}")

        # So s√°nh bi·ªÉn s·ªë qu√©t ƒë∆∞·ª£c v·ªõi bi·ªÉn s·ªë trong database
        if plate_text.upper() != db_plate.upper():
            logging.error(f"Plate mismatch: Scanned={plate_text.upper()}, DB={db_plate.upper()} for RFID {current_rfid}")
            messagebox.showerror(
                "L·ªói bi·ªÉn s·ªë kh√¥ng kh·ªõp", 
                f"Bi·ªÉn s·ªë qu√©t ra: {plate_text.upper()}\n"
                f"Bi·ªÉn s·ªë trong h·ªá th·ªëng: {db_plate.upper()}\n"
                f"RFID: {current_rfid}\n\n"
                f"Bi·ªÉn s·ªë kh√¥ng kh·ªõp v·ªõi xe n√†y!\n"
                f"Vui l√≤ng ki·ªÉm tra l·∫°i xe."
            )
            self.publish_mqtt_command("parking/command", "RFID_MISMATCH_OUT")
            self.parking_status["current_operation"] = "idle"
            self.info_vars["Bi·ªÉn S·ªë Xe:"].set(".....")
            self.info_vars["Tr·∫°ng Th√°i:"].set("S·∫¥N S√ÄNG - Bi·ªÉn s·ªë kh√¥ng kh·ªõp")
            return

        # Ki·ªÉm tra entry_time c√≥ ƒë√∫ng ki·ªÉu datetime kh√¥ng
        if not isinstance(entry_time, datetime):
            logging.error(f"Unexpected entry_time type: {type(entry_time)}")
            messagebox.showerror("L·ªói", "L·ªói d·ªØ li·ªáu th·ªùi gian v√†o t·ª´ c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng li√™n h·ªá admin.")
            self.parking_status["current_operation"] = "idle"
            self.reset_info_panel()
            return

        # T√≠nh th·ªùi gian v√† ph√≠
        exit_time = datetime.now()
        duration = exit_time - entry_time

        # T√≠nh to√°n th·ªùi gian ƒë·ªó xe d∆∞·ªõi d·∫°ng human-readable
        days = duration.days
        hours, remainder = divmod(duration.seconds, 3600)
        minutes, _ = divmod(remainder, 60)

        duration_str = ""
        if days > 0: duration_str += f"{days} ng√†y "
        if hours > 0: duration_str += f"{hours} gi·ªù "
        duration_str += f"{minutes} ph√∫t"

        # T√≠nh ph√≠ theo gi·ªù (l√†m tr√≤n l√™n)
        total_seconds_raw = duration.total_seconds()
        charged_hours = math.ceil(total_seconds_raw / 3600) if total_seconds_raw > 0 else 1
        fee = charged_hours * 10000
        logging.debug(f"Calculated fee: {fee} VNƒê for duration {duration_str}")

        # C·∫≠p nh·∫≠t th√¥ng tin hi·ªÉn th·ªã
        self.info_vars["Bi·ªÉn S·ªë Xe:"].set(db_plate)
        self.info_vars["ID Th·∫ª:"].set(db_rfid)
        self.info_vars["Tr·∫°ng Th√°i:"].set("‚úì RFID & BSX kh·ªõp - Ch·ªù thanh to√°n")
        self.info_vars["Th·ªùi gian:"].set(exit_time.strftime('%Y-%m-%d %H:%M:%S'))
        self.info_vars["T·ªïng gi·ªù g·ª≠i:"].set(duration_str.strip())
        self.info_vars["T·ªïng Ph√≠:"].set(f"{int(fee):,} VNƒê")
        self.info_vars["Tr·∫°ng Th√°i Thanh To√°n:"].set("Ch∆∞a thanh to√°n")

        # V√¥ hi·ªáu h√≥a c√°c n√∫t barrier khi ƒëang trong qu√° tr√¨nh thanh to√°n
        if hasattr(self, 'btn_barrier_in'):
            self.btn_barrier_in.config(state=tk.DISABLED)
        if hasattr(self, 'btn_barrier_out'):
            self.btn_barrier_out.config(state=tk.DISABLED)

        # B√°o cho ESP32 bi·∫øt ƒë√£ qu√©t bi·ªÉn s·ªë th√†nh c√¥ng, ƒëang ch·ªù thanh to√°n
        self.publish_mqtt_command("parking/command", "PLATE_SCAN_SUCCESS_OUT")

        logging.info(f"‚úì RFID-BSX validated: RFID={db_rfid}, Plate={db_plate}, Fee={fee:,} VNƒê")

        # B·∫Øt ƒë·∫ßu quy tr√¨nh thanh to√°n
        try:
            # L∆∞u h√¨nh ·∫£nh
            image_name = f"RA_{plate_text.replace('.', '')}_{exit_time.strftime('%Y%m%d%H%M%S')}.jpg"
            image_path = os.path.join('anh', image_name)
            try:
                if frame is not None:
                    cv2.imwrite(image_path, frame)
                    logging.info(f"Exit image saved successfully at: {image_path}")
            except Exception as e:
                logging.error(f"Failed to save exit image: {e}")
                image_path = ""
            
            # G·ªçi h√†m thanh to√°n
            self._start_payment_flow(plate_text, fee, exit_time, frame)
            
        except Exception as e:
            logging.error(f"Error starting payment flow: {e}")
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ kh·ªüi t·∫°o thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.")
            self.parking_status["current_operation"] = "idle"  # Th√™m d√≤ng n√†y
            self.on_payment_cancel()


    def _start_payment_flow(self, plate_text, fee, exit_time, frame):
        logging.debug(f"Starting payment flow for plate {plate_text}, fee {fee}")
        
        # T·∫°o d·ªØ li·ªáu xe ƒë·ªÉ truy·ªÅn v√†o h·ªá th·ªëng thanh to√°n
        vehicle_data_dict = {
            'license_plate': plate_text,
            'hours': math.ceil(fee / 10000)
        }
        
        # H√†m callback khi thanh to√°n th√†nh c√¥ng (d√πng chung cho c·∫£ QR v√† cash)
        def on_payment_success(transaction_data):
            logging.info(f"üéâ Thanh to√°n th√†nh c√¥ng: {transaction_data}")
            
            # Th√¥ng b√°o cho ESP32 bi·∫øt ƒë√£ thanh to√°n th√†nh c√¥ng
            self.publish_mqtt_command("parking/command", f"PAYMENT_SUCCESS:{fee}")
            
            # L∆∞u th√¥ng tin ra v√†o c∆° s·ªü d·ªØ li·ªáu
            image_name = f"RA_{plate_text.replace('.', '')}_{exit_time.strftime('%Y%m%d%H%M%S')}.jpg"
            image_path = os.path.join('anh', image_name)
            try:
                if frame is not None and not os.path.exists(image_path):
                    cv2.imwrite(image_path, frame)
                    logging.info(f"Exit image saved successfully at: {image_path}")
            except Exception as e:
                logging.error(f"Failed to save exit image: {e}")
                image_path = ""
            
            try:
                # C·∫≠p nh·∫≠t th√¥ng tin xe ra v√†o database
                self.db.log_car_exit(self.active_vehicle_id, exit_time, fee, image_path, self.current_user['name'])
                logging.info(f"DB exit updated successfully for record ID {self.active_vehicle_id}")
                
                # Gi·∫£m s·ªë l∆∞·ª£ng xe trong b√£i
                if self.parking_status["slots_occupied"] > 0:
                    self.parking_status["slots_occupied"] -= 1
            except Exception as e:
                logging.error(f"Database error during exit: {e}")
                messagebox.showerror("L·ªói c∆° s·ªü d·ªØ li·ªáu", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin xe ra! Ki·ªÉm tra k·∫øt n·ªëi MySQL ho·∫∑c log l·ªói.")
                return
            
            # C·∫≠p nh·∫≠t giao di·ªán
            self.root.after(0, lambda: self.info_vars["Tr·∫°ng Th√°i:"].set("ƒê√£ r·ªùi b√£i"))
            self.root.after(0, lambda: self.info_vars["Tr·∫°ng Th√°i Thanh To√°n:"].set("ƒê√£ thanh to√°n"))
            
            # K√≠ch ho·∫°t l·∫°i c√°c n√∫t barrier
            self.root.after(0, lambda: self.btn_barrier_in.config(state=tk.NORMAL))
            self.root.after(0, lambda: self.btn_barrier_out.config(state=tk.NORMAL))
            self.parking_status["current_operation"] = "idle"
            
            # Th√¥ng b√°o th√†nh c√¥ng
            payment_method = transaction_data.get('payment_method', 'QR')
            success_msg = f"Xe {plate_text} ƒë√£ ra kh·ªèi b√£i.\nPh√≠: {fee:,} VNƒê\nPh∆∞∆°ng th·ª©c: {payment_method.upper()}"
            self.root.after(0, lambda: messagebox.showinfo("Th√†nh c√¥ng", success_msg))
            self.root.after(2000, self.reset_info_panel)
        
        # H√†m callback khi h·∫øt th·ªùi gian ch·ªù thanh to√°n
        def on_payment_timeout():
            logging.warning("‚åõ Th·ªùi gian ch·ªù thanh to√°n h·∫øt h·∫°n")
            self.root.after(0, lambda: messagebox.showwarning("H·∫øt th·ªùi gian", "Th·ªùi gian ch·ªù thanh to√°n ƒë√£ h·∫øt. Vui l√≤ng qu√©t l·∫°i th·∫ª RFID."))
            self.publish_mqtt_command("parking/command", "PAYMENT_FAIL")
            self.root.after(0, self.on_payment_cancel)
        
        try:
            # B·∫Øt ƒë·∫ßu quy tr√¨nh thanh to√°n
            payment_data = self.payment_manager.start_payment_flow(
                vehicle_data_dict, 
                fee, 
                on_payment_success,  # Callback s·∫Ω ƒë∆∞·ª£c wrapped trong show_qr_payment
                on_payment_timeout
            )
            logging.debug(f"Payment data: {payment_data}")
            
            # Hi·ªÉn th·ªã QR thanh to√°n v√† nh·∫≠n wrapped callback
            wrapped_callback = self.show_qr_payment(
                payment_data['qr_url'], 
                payment_data['session_id'], 
                payment_data['amount'], 
                payment_data['description'], 
                on_payment_success  # Callback g·ªëc, s·∫Ω ƒë∆∞·ª£c wrap trong show_qr_payment
            )
            
            logging.info("üí≥ QR Payment window opened with synchronized callbacks")
            
        except Exception as e:
            logging.error(f"Payment flow error: {e}")
            messagebox.showerror("L·ªói thanh to√°n", "Kh√¥ng th·ªÉ kh·ªüi t·∫°o thanh to√°n. Vui l√≤ng qu√©t l·∫°i th·∫ª RFID.")
            self.publish_mqtt_command("parking/command", "PAYMENT_FAIL")
            self.parking_status["current_operation"] = "idle"
            self.on_payment_cancel()

    def show_qr_payment(self, qr_url, session_id, amount, description, on_payment_success):
        logging.debug(f"Showing QR payment: URL={qr_url}, Amount={amount}, Desc={description}")
        
        # T·∫°o c·ª≠a s·ªï QR m·ªõi
        qr_window = tk.Toplevel(self.root)
        qr_window.title("Thanh to√°n qua QR")
        qr_window.geometry('400x650')
        qr_window.transient(self.root)
        qr_window.grab_set()
        qr_window.resizable(False, False)
        
        # CƒÉn gi·ªØa c·ª≠a s·ªï
        qr_window.update_idletasks()
        x = (qr_window.winfo_screenwidth() // 2) - (400 // 2)
        y = (qr_window.winfo_screenheight() // 2) - (600 // 2)
        qr_window.geometry(f"400x650+{x}+{y}")
        
        # Bi·∫øn ƒë·ªÉ tracking tr·∫°ng th√°i thanh to√°n
        payment_completed = {'status': False}
        countdown_active = {'status': True}
        
        # Ti√™u ƒë·ªÅ
        title_label = ttk.Label(qr_window, text="THANH TO√ÅN QUA QR CODE", 
                            font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # Canvas cho m√£ QR
        qr_canvas = tk.Canvas(qr_window, width=300, height=300, bg='white')
        qr_canvas.pack(pady=10)
        
        # H√†m t·∫£i m√£ QR
        def load_qr():
            try:
                with urllib.request.urlopen(qr_url, timeout=10) as response:
                    qr_img = Image.open(response).resize((300, 300), Image.Resampling.LANCZOS)
                    qr_photo = ImageTk.PhotoImage(image=qr_img)
                    qr_canvas.create_image(0, 0, image=qr_photo, anchor='nw')
                    qr_canvas.image = qr_photo
                    logging.debug("QR image loaded successfully")
            except Exception as e:
                logging.error(f"L·ªói t·∫£i m√£ QR: {e}")
                qr_canvas.create_text(150, 150, text="L·ªói t·∫£i m√£ QR\nVui l√≤ng th·ª≠ l·∫°i", 
                                    fill="red", font=("Arial", 14), justify='center')
        
        # T·∫£i m√£ QR trong thread ri√™ng
        threading.Thread(target=load_qr, daemon=True).start()
        
        # Khung th√¥ng tin chi ti·∫øt thanh to√°n
        details_frame = ttk.LabelFrame(qr_window, text="Chi ti·∫øt thanh to√°n")
        details_frame.pack(pady=10, padx=20, fill='x')
        
        ttk.Label(details_frame, text=f"S·ªë ti·ªÅn: {amount:,} VNƒê", 
                font=('Arial', 14, 'bold')).pack(pady=5)
        ttk.Label(details_frame, text=f"N·ªôi dung: {description}").pack(pady=5)
        
        # ƒê·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c
        countdown_var = tk.StringVar(value="C√≤n l·∫°i: 05:00")
        countdown_label = ttk.Label(qr_window, textvariable=countdown_var, 
                                font=('Arial', 12), foreground='red')
        countdown_label.pack(pady=10)
        
        # Status label ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i
        status_var = tk.StringVar(value="ƒêang ch·ªù thanh to√°n...")
        status_label = ttk.Label(qr_window, textvariable=status_var, 
                            font=('Arial', 12, 'bold'), foreground='blue')
        status_label.pack(pady=5)
        
        # H√†m ƒë√≥ng c·ª≠a s·ªï an to√†n
        def close_window_safely():
            try:
                if qr_window.winfo_exists():
                    qr_window.destroy()
                    logging.info("üîí QR payment window closed")
            except tk.TclError:
                pass  # Window already destroyed
        
        # Wrapper cho on_payment_success ƒë·ªÉ ƒë√≥ng c·ª≠a s·ªï
        original_on_success = on_payment_success
        def wrapped_on_success(transaction_data):
            if not payment_completed['status']:
                payment_completed['status'] = True
                countdown_active['status'] = False
                
                # Th√™m logging chi ti·∫øt h∆°n
                payment_method = transaction_data.get('payment_method', 'QR')
                logging.info(f"üéâ {payment_method.upper()} Payment successful - closing window")
                
                # C·∫≠p nh·∫≠t UI tr∆∞·ªõc khi ƒë√≥ng
                try:
                    status_var.set("‚úÖ Thanh to√°n th√†nh c√¥ng!")
                    countdown_var.set("Ho√†n t·∫•t!")
                    qr_window.update()
                except tk.TclError:
                    pass
                
                # ƒê√≥ng c·ª≠a s·ªï sau 1.5 gi√¢y (tƒÉng t·ª´ 1 gi√¢y ƒë·ªÉ user th·∫•y r√µ message)
                qr_window.after(1500, close_window_safely)
                
                # G·ªçi callback g·ªëc
                original_on_success(transaction_data)
            else:
                logging.warning("‚ö†Ô∏è Payment already completed, ignoring duplicate callback")

        
        # H√†m ƒë·∫øm ng∆∞·ª£c
        remaining_time = 300
        def update_countdown():
            nonlocal remaining_time
            
            if not countdown_active['status'] or payment_completed['status']:
                return  # D·ª´ng countdown n·∫øu thanh to√°n th√†nh c√¥ng
                
            if remaining_time > 0:
                mins, secs = divmod(remaining_time, 60)
                countdown_var.set(f"C√≤n l·∫°i: {mins:02d}:{secs:02d}")
                remaining_time -= 1
                qr_window.after(1000, update_countdown)
            else:
                countdown_var.set("H·∫øt th·ªùi gian!")
                if not payment_completed['status']:
                    close_window_safely()
                    self.on_payment_cancel()
        
        update_countdown()
        
        # C√°c n√∫t ƒëi·ªÅu khi·ªÉn
        btn_frame = ttk.Frame(qr_window)
        btn_frame.pack(pady=20)
        
        # X·ª≠ l√Ω thanh to√°n ti·ªÅn m·∫∑t
        def handle_cash_payment():
            if payment_completed['status']:
                logging.warning("‚ö†Ô∏è Payment already completed, ignoring cash payment")
                return  # ƒê√£ thanh to√°n r·ªìi
                
            result = messagebox.askyesno("X√°c nh·∫≠n", 
                f"X√°c nh·∫≠n ƒë√£ thu ti·ªÅn m·∫∑t {amount:,} VNƒê?")
            if result:
                payment_completed['status'] = True
                countdown_active['status'] = False
                
                # H·ªßy session QR payment
                self.payment_manager.cancel_payment(session_id)
                self.publish_mqtt_command("parking/command", f"PAYMENT_SUCCESS:{amount}")
                
                # C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
                try:
                    status_var.set("‚úÖ Thu ti·ªÅn m·∫∑t th√†nh c√¥ng!")
                    countdown_var.set("Ho√†n t·∫•t!")
                except tk.TclError:
                    pass
                
                # G·ªçi callback v·ªõi d·ªØ li·ªáu ti·ªÅn m·∫∑t
                wrapped_on_success({
                    'payment_method': 'cash',
                    'amount': amount,
                    'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'operator': self.current_user['name']
                })
                
                logging.info("üíµ Cash payment processed - QR session cancelled")
        
        # N√∫t thu ti·ªÅn m·∫∑t
        cash_btn = ttk.Button(btn_frame, text="Thu ti·ªÅn m·∫∑t", 
                command=handle_cash_payment, 
                style='Success.TButton')
        cash_btn.pack(side=tk.LEFT, padx=10)
        
        # X·ª≠ l√Ω h·ªßy thanh to√°n
        def handle_cancel():
            if payment_completed['status']:
                return  # ƒê√£ thanh to√°n r·ªìi
                
            payment_completed['status'] = True
            countdown_active['status'] = False
            
            self.payment_manager.cancel_payment(session_id)
            self.publish_mqtt_command("parking/command", "PAYMENT_FAIL")
            
            close_window_safely()
            self.on_payment_cancel()
            
            logging.info("‚ùå Payment cancelled by user")
        
        # N√∫t h·ªßy
        cancel_btn = ttk.Button(btn_frame, text="H·ªßy", 
                command=handle_cancel, 
                style='Danger.TButton')
        cancel_btn.pack(side=tk.LEFT, padx=10)
        
        # Th√™m h∆∞·ªõng d·∫´n
        guide_text = "- Qu√©t m√£ QR b·∫±ng ·ª©ng d·ª•ng ng√¢n h√†ng\n- Thanh to√°n ƒë√∫ng s·ªë ti·ªÅn v√† n·ªôi dung\n- H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông x√°c nh·∫≠n"
        ttk.Label(qr_window, text=guide_text, justify=tk.LEFT).pack(pady=10)
        
        # X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï b·∫±ng X
        def on_window_close():
            handle_cancel()
        
        qr_window.protocol("WM_DELETE_WINDOW", on_window_close)
        
        # C·∫≠p nh·∫≠t callback trong payment flow ƒë·ªÉ s·ª≠ d·ª•ng wrapped version
        # (ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o khi QR th√†nh c√¥ng, c·ª≠a s·ªï s·∫Ω ƒë√≥ng)
        return wrapped_on_success

    def on_payment_cancel(self):
        logging.info("Payment cancelled, returning to RFID scanning state")
        self.parking_status["current_operation"] = "idle"
        self.info_vars["Tr·∫°ng Th√°i:"].set("QU√âT TH·∫∫ RFID")
        self.info_vars["Bi·ªÉn S·ªë Xe:"].set(".....")
        self.info_vars["ID Th·∫ª:"].set(".....")
        self.info_vars["Th·ªùi gian:"].set(".....")
        self.info_vars["T·ªïng gi·ªù g·ª≠i:"].set(".....")
        self.info_vars["T·ªïng Ph√≠:"].set("0 VNƒê")
        self.info_vars["Tr·∫°ng Th√°i Thanh To√°n:"].set(".....")
        self.plate_out_var.set(".....")
        self.clear_plate_image(self.plate_out_canvas)
        if hasattr(self, 'btn_barrier_in'):
            self.btn_barrier_in.config(state=tk.NORMAL)
        if hasattr(self, 'btn_barrier_out'):
            self.btn_barrier_out.config(state=tk.NORMAL)
        messagebox.showinfo("H·ªßy thanh to√°n", "Thanh to√°n ƒë√£ b·ªã h·ªßy. Vui l√≤ng qu√©t l·∫°i th·∫ª RFID.")

    def load_models(self, update_progress_callback=None):
        def update(value):
            if update_progress_callback:
                self.root.after(0, update_progress_callback, value)
        
        logging.info("B·∫Øt ƒë·∫ßu t·∫£i m√¥ h√¨nh LPR...")
        update(20)
        
        if self.lpr_system:
            success = self.lpr_system.load_models()
            if not success:
                logging.error("Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh LPR.")
                self.root.after(0, self.show_model_load_error)
        
        update(80)
        time.sleep(1)
        logging.info("T·∫£i m√¥ h√¨nh ho√†n t·∫•t.")
        update(100)

    def show_model_load_error(self):
        if messagebox.askretrycancel("L·ªói t·∫£i m√¥ h√¨nh", "Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh LPR. Th·ª≠ l·∫°i?"):
            self.load_models()

    def start(self, user_info):
        self.current_user = user_info
        self.root.title("H·ªÜ TH·ªêNG B√ÉI XE TH√îNG MINH")
        self.root.geometry('1200x650')
        self.root.resizable(True, True)
        self.root.configure(bg='#dcdcdc')
        self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
        
        self.setup_styles()
        self.create_main_container()
        self.show_main_screen()
        
        self.root.update_idletasks()
        self.root.deiconify()

    def create_main_container(self):
        self.main_container = ttk.Frame(self.root, style='Main.TFrame')
        self.main_container.pack(fill=tk.BOTH, expand=True)
        
        self.header_frame = ttk.Frame(self.main_container, height=60)
        self.header_frame.pack(fill=tk.X)
        self.header_frame.grid_columnconfigure(0, weight=1)
        self.header_frame.grid_columnconfigure(1, weight=1)
        self.header_frame.grid_columnconfigure(2, weight=1)
        
        self.left_header_frame = ttk.Frame(self.header_frame)
        self.left_header_frame.grid(row=0, column=0, sticky='w', padx=10)
        
        self.center_header_frame = ttk.Frame(self.header_frame)
        self.center_header_frame.grid(row=0, column=1, sticky='ew')
        
        self.right_header_frame = ttk.Frame(self.header_frame)
        self.right_header_frame.grid(row=0, column=2, sticky='e', padx=10)
        
        self.title_label = ttk.Label(self.center_header_frame, text="H·ªÜ TH·ªêNG B√ÉI XE TH√îNG MINH", style='Title.TLabel')
        self.title_label.pack(pady=12)
        
        try:
            self.logo_img_pil = Image.open("logo.png").resize((100, 80), Image.Resampling.LANCZOS)
            self.logo_img = ImageTk.PhotoImage(self.logo_img_pil)
            ttk.Label(self.right_header_frame, image=self.logo_img).pack()
        except FileNotFoundError:
            ttk.Label(self.right_header_frame, text="Logo not found").pack()
        
        self.content_frame = ttk.Frame(self.main_container, style='Content.TFrame')
        self.content_frame.pack(fill=tk.BOTH, expand=True)

    def show_main_screen(self):
        self.current_screen = "main"
        self.clear_content()
        self.show_user_menu()
        self.init_cameras()
        
        cam_in_frame = ttk.LabelFrame(self.content_frame, text="CAMERA V√ÄO")
        cam_in_frame.place(relx=0.02, rely=0.02, relwidth=0.3, relheight=0.4)
        self.camera_in_canvas = tk.Canvas(cam_in_frame, bg='grey')
        self.camera_in_canvas.pack(fill=tk.BOTH, expand=True)
        
        cam_out_frame = ttk.LabelFrame(self.content_frame, text="CAMERA RA")
        cam_out_frame.place(relx=0.33, rely=0.02, relwidth=0.3, relheight=0.4)
        self.camera_out_canvas = tk.Canvas(cam_out_frame, bg='black')
        self.camera_out_canvas.pack(fill=tk.BOTH, expand=True)
        
        plate_in_img_frame = ttk.LabelFrame(self.content_frame, text="·∫¢NH C·∫ÆT BI·ªÇN S·ªê")
        plate_in_img_frame.place(relx=0.02, rely=0.45, relwidth=0.3, relheight=0.12)
        self.plate_in_canvas = tk.Canvas(plate_in_img_frame, bg='lightgrey')
        self.plate_in_canvas.pack(fill=tk.BOTH, expand=True)
        
        plate_out_img_frame = ttk.LabelFrame(self.content_frame, text="·∫¢NH C·∫ÆT BI·ªÇN S·ªê")
        plate_out_img_frame.place(relx=0.33, rely=0.45, relwidth=0.3, relheight=0.12)
        self.plate_out_canvas = tk.Canvas(plate_out_img_frame, bg='lightgrey')
        self.plate_out_canvas.pack(fill=tk.BOTH, expand=True)
        
        plate_in_text_frame = ttk.LabelFrame(self.content_frame, text="BI·ªÇN S·ªê PH√ÅT HI·ªÜN")
        plate_in_text_frame.place(relx=0.02, rely=0.6, relwidth=0.3, relheight=0.13)
        self.plate_in_var = tk.StringVar(value=".....")
        plate_in_label = ttk.Label(plate_in_text_frame, textvariable=self.plate_in_var, font=('Arial', 22, 'bold'), foreground=self.colors['primary'], anchor='center')
        plate_in_label.pack(fill=tk.BOTH, expand=True)
        
        plate_out_text_frame = ttk.LabelFrame(self.content_frame, text="BI·ªÇN S·ªê PH√ÅT HI·ªÜN")
        plate_out_text_frame.place(relx=0.33, rely=0.6, relwidth=0.3, relheight=0.13)
        self.plate_out_var = tk.StringVar(value=".....")
        plate_out_label = ttk.Label(plate_out_text_frame, textvariable=self.plate_out_var, font=('Arial', 22, 'bold'), foreground=self.colors['primary'], anchor='center')
        plate_out_label.pack(fill=tk.BOTH, expand=True)
        
        info_frame = ttk.LabelFrame(self.content_frame, text="TH√îNG TIN XE")
        info_frame.place(relx=0.65, rely=0.02, relwidth=0.33, relheight=0.4)
        info_frame.columnconfigure(1, weight=1)
        
        # ƒê∆∞a "Tr·∫°ng Th√°i:" l√™n ƒë·∫ßu danh s√°ch
        labels = ["Tr·∫°ng Th√°i:", "Bi·ªÉn S·ªë Xe:", "ID Th·∫ª:", "Th·ªùi gian:", "T·ªïng gi·ªù g·ª≠i:", "T·ªïng Ph√≠:", "Tr·∫°ng Th√°i Thanh To√°n:"]
        self.info_vars = {label: tk.StringVar(value=".....") for label in labels}
        
        for i, txt in enumerate(labels):
            ttk.Label(info_frame, text=txt, style='Info.TLabel').grid(row=i, column=0, sticky='w', pady=4, padx=10)
            lbl = ttk.Label(info_frame, textvariable=self.info_vars[txt], font=('Arial', 12, 'bold'))
            lbl.grid(row=i, column=1, sticky='w', padx=10)
            
            if txt == "T·ªïng Ph√≠:": 
                lbl.config(foreground=self.colors['danger'])
            if txt == "Tr·∫°ng Th√°i Thanh To√°n:": 
                lbl.config(foreground=self.colors['warning'])
            if txt == "Tr·∫°ng Th√°i:": 
                lbl.config(foreground=self.colors['secondary'])
        
        control_frame = ttk.LabelFrame(self.content_frame, text="ƒêI·ªÄU KHI·ªÇN")
        control_frame.place(relx=0.65, rely=0.45, relwidth=0.33, relheight=0.25)
        
        btn_container = ttk.Frame(control_frame)
        btn_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        self.btn_barrier_in = ttk.Button(btn_container, text="M·ªû BARRIER V√ÄO", style='Success.TButton', command=self.toggle_barrier_in)
        self.btn_barrier_in.pack(fill=tk.X, expand=True, pady=3)
        
        self.btn_barrier_out = ttk.Button(btn_container, text="M·ªû BARRIER RA", style='Primary.TButton', command=self.toggle_barrier_out)
        self.btn_barrier_out.pack(fill=tk.X, expand=True, pady=3)      
        self.reset_info_panel()
        
        if self._camera_update_id:
            self.root.after_cancel(self._camera_update_id)
        self.update_cameras()

    def toggle_barrier_in(self):
        current_text = self.btn_barrier_in.cget("text")
        
        if "M·ªû" in current_text:
            self.publish_mqtt_command("parking/manual", "BARRIER_IN_OPEN")
            self.btn_barrier_in.config(text="ƒêANG M·ªû...", state=tk.DISABLED)
            logging.info("Manual command sent: BARRIER_IN_OPEN")
        else:
            self.publish_mqtt_command("parking/manual", "BARRIER_IN_CLOSE")
            self.btn_barrier_in.config(text="ƒêANG ƒê√ìNG...", state=tk.DISABLED)
            logging.info("Manual command sent: BARRIER_IN_CLOSE")
        
        self.root.after(2000, lambda: self.btn_barrier_in.config(state=tk.NORMAL))

    def toggle_barrier_out(self):
        current_text = self.btn_barrier_out.cget("text")
        
        if "M·ªû" in current_text:
            self.publish_mqtt_command("parking/manual", "BARRIER_OUT_OPEN")
            self.btn_barrier_out.config(text="ƒêANG M·ªû...", state=tk.DISABLED)
            logging.info("Manual command sent: BARRIER_OUT_OPEN")
        else:
            self.publish_mqtt_command("parking/manual", "BARRIER_OUT_CLOSE") 
            self.btn_barrier_out.config(text="ƒêANG ƒê√ìNG...", state=tk.DISABLED)
            logging.info("Manual command sent: BARRIER_OUT_CLOSE")
        
        self.root.after(2000, lambda: self.btn_barrier_out.config(state=tk.NORMAL))

    def _on_closing(self):
        if messagebox.askokcancel("Tho√°t", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t ·ª©ng d·ª•ng?"):
            self.payment_manager.cleanup_expired_sessions()
            self.release_cameras()
            
            try:
                self.mqtt_client.publish("parking/status", "APP_DISCONNECTED", qos=1, retain=True)
                self.mqtt_client.disconnect()
                time.sleep(0.5)
            except Exception as e:
                logging.error(f"Error during MQTT disconnect: {e}")
                
            self.root.destroy()

    def setup_styles(self):
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        self.colors = {
            'primary': '#2E86C1', 
            'secondary': '#28B463', 
            'danger': '#E74C3C', 
            'warning': '#F39C12', 
            'dark': "#1B3249", 
            'light': '#ECF0F1', 
            'white': '#FFFFFF'
        }
        
        self.style.configure('Main.TFrame', background='#dcdcdc')
        self.style.configure('Content.TFrame', background='#dcdcdc')
        self.style.configure('TLabel', background='#dcdcdc')
        self.style.configure('TLabelframe', background='#dcdcdc')
        self.style.configure('TLabelframe.Label', background='#dcdcdc')
        self.style.configure('Title.TLabel', font=('Arial', 24, 'bold'), foreground=self.colors['dark'])
        self.style.configure('Heading.TLabel', font=('Arial', 16, 'bold'), foreground=self.colors['primary'])
        self.style.configure('Info.TLabel', font=('Arial', 11))
        
        for btn_style, color in [('Primary', 'primary'), ('Success', 'secondary'), ('Danger', 'danger')]:
            self.style.configure(
                f'{btn_style}.TButton', 
                font=('Arial', 12, 'bold'), 
                foreground='white', 
                background=self.colors[color], 
                padding=10
            )
            self.style.map(
                f'{btn_style}.TButton', 
                background=[('active', self.colors[color])]
            )

    def clear_content(self, clear_header=False):
        for widget in self.content_frame.winfo_children():
            widget.destroy()
        
        if clear_header:
            for widget in self.left_header_frame.winfo_children():
                widget.destroy()

    def show_user_menu(self):
        for widget in self.left_header_frame.winfo_children():
            widget.destroy()
        
        if self.current_user:
            role_map = {'admin': 'Admin', 'user': 'Nh√¢n vi√™n'}
            user_display_text = f"[{role_map.get(self.current_user['role'], 'User')}]: {self.current_user['name']}"
            
            menu_btn = ttk.Menubutton(self.left_header_frame, text=user_display_text, style='Primary.TButton')
            menu_btn.pack(side=tk.LEFT, padx=5)
            
            menu = tk.Menu(menu_btn, tearoff=0)
            menu_btn.config(menu=menu)
            
            menu.add_command(label="TRANG CH√çNH", command=self.show_main_screen)
            menu.add_separator()
            
            if self.current_user['role'] == 'admin':
                menu.add_command(label="L·ªäCH S·ª¨ XE", command=self.show_history)
                menu.add_command(label="QU·∫¢N L√ù NH√ÇN S·ª∞", command=self.show_staff_management)
                menu.add_command(label="B√ÅO C√ÅO DOANH THU", command=self.show_revenue_report)
                menu.add_separator()
                
            menu.add_command(label="ƒêƒÇNG XU·∫§T", command=self.logout)

    def logout(self):
        if messagebox.askyesno("ƒêƒÉng xu·∫•t", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t v√† tho√°t ch∆∞∆°ng tr√¨nh?"):
            self._on_closing()

    def _camera_reader_thread(self, vid_capture, frame_storage_attr, lock):
        while self.is_running:
            if vid_capture and vid_capture.isOpened():
                ret, frame = vid_capture.read()
                if ret:
                    with lock:
                        setattr(self, frame_storage_attr, frame)
                else:
                    logging.warning(f"Kh√¥ng th·ªÉ ƒë·ªçc frame t·ª´ camera c·ªßa {frame_storage_attr}.")
            else:
                logging.error(f"Camera cho {frame_storage_attr} kh√¥ng m·ªü ho·∫∑c kh√¥ng t·ªìn t·∫°i.")
            time.sleep(1/30)
        
        logging.info(f"Lu·ªìng ƒë·ªçc camera cho {frame_storage_attr} ƒë√£ d·ª´ng.")

    def init_cameras(self):
        self.release_cameras()
        
        self.vid_in = cv2.VideoCapture(1)
        self.vid_out = cv2.VideoCapture(0)
        
        if not self.vid_in.isOpened() or not self.vid_out.isOpened():
            logging.error("Failed to open one or both cameras")
            messagebox.showwarning("Camera Error", "Kh√¥ng th·ªÉ m·ªü m·ªôt ho·∫∑c c·∫£ hai camera. Ki·ªÉm tra k·∫øt n·ªëi c·ªßa b·∫°n.")
        
        self.is_running = True
        
        self.camera_thread_in = threading.Thread(
            target=self._camera_reader_thread, 
            args=(self.vid_in, 'latest_frame_in', self.frame_lock_in), 
            daemon=True
        )
        self.camera_thread_out = threading.Thread(
            target=self._camera_reader_thread, 
            args=(self.vid_out, 'latest_frame_out', self.frame_lock_out), 
            daemon=True
        )
        
        self.camera_thread_in.start()
        self.camera_thread_out.start()
        
        logging.info("C√°c lu·ªìng ƒë·ªçc camera ƒë√£ b·∫Øt ƒë·∫ßu.")

    def update_cameras(self):
        if self.current_screen != "main":
            return
        
        with self.frame_lock_in:
            frame_in = self.latest_frame_in.copy() if self.latest_frame_in is not None else None
            
        with self.frame_lock_out:
            frame_out = self.latest_frame_out.copy() if self.latest_frame_out is not None else None
        
        self.current_frame_in = frame_in
        self.current_frame_out = frame_out
        
        self.update_single_camera_display(self.current_frame_in, self.camera_in_canvas, 'grey')
        self.update_single_camera_display(self.current_frame_out, self.camera_out_canvas, 'black')
        
        self._camera_update_id = self.root.after(30, self.update_cameras)

    def update_single_camera_display(self, frame, canvas, error_bg_color):
        if frame is not None:
            canvas_w = canvas.winfo_width()
            canvas_h = canvas.winfo_height()
            
            if canvas_w > 1 and canvas_h > 1:
                try:
                    frame_resized = cv2.resize(frame, (canvas_w, canvas_h))
                    rgb_frame = cv2.cvtColor(frame_resized, cv2.COLOR_BGR2RGB)
                    img = Image.fromarray(rgb_frame)
                    photo = ImageTk.PhotoImage(image=img)
                    canvas.create_image(0, 0, image=photo, anchor=tk.NW)
                    canvas.image = photo
                    return
                except Exception as e:
                    logging.error(f"L·ªói khi hi·ªÉn th·ªã frame: {e}")
                    self.create_no_camera_display(canvas, "L·ªñI HI·ªÇN TH·ªä", error_bg_color)
                    return
                
        self.create_no_camera_display(canvas, "L·ªñI CAMERA", error_bg_color)

    def release_cameras(self):
        self.is_running = False
        
        if self._camera_update_id:
            self.root.after_cancel(self._camera_update_id)
            self._camera_update_id = None
        
        if self.camera_thread_in and self.camera_thread_in.is_alive():
            self.camera_thread_in.join(timeout=1.0)
            
        if self.camera_thread_out and self.camera_thread_out.is_alive():
            self.camera_thread_out.join(timeout=1.0)
        
        if self.vid_in:  
            self.vid_in.release()
            
        if self.vid_out:  
            self.vid_out.release()
            
        self.vid_in, self.vid_out = None, None
        logging.info("Cameras and reader threads released.")

    def create_no_camera_display(self, canvas, message, bg_color):
        canvas_w, canvas_h = canvas.winfo_width(), canvas.winfo_height()
        canvas.delete("all")
        
        if canvas_w > 1 and canvas_h > 1:
            canvas.create_rectangle(0, 0, canvas_w, canvas_h, fill=bg_color)
            canvas.create_text(canvas_w/2, canvas_h/2, text=message, fill="white", font=("Arial", 20, "bold"))

    def detect_license_plate(self, frame, canvas, output_widget):
        if not (self.lpr_system and self.lpr_system.is_ready()):
            self.set_widget_text(output_widget, "LPR L·ªói")
            return None
        
        result = self.lpr_system.detect_and_read_plate(frame)
        
        if result['success'] and result['plates']:
            best_plate = self.lpr_system.get_best_plate(result)
            if best_plate:
                self.root.after(0, lambda: self.display_plate_image(best_plate['cropped_image'], canvas))
                self.set_widget_text(output_widget, best_plate['text'])
                return best_plate['text']
        
        self.set_widget_text(output_widget, "Kh√¥ng th·∫•y")
        self.root.after(0, lambda: self.clear_plate_image(canvas))
        return None

    def set_widget_text(self, widget, text):
        def command():
            if isinstance(widget, tk.StringVar):
                widget.set(text)
            elif isinstance(widget, ttk.Entry):
                widget.delete(0, tk.END)
                widget.insert(0, text)
        self.root.after(0, command)

    def display_plate_image(self, plate_img, canvas):
        canvas.delete("all")
        canvas_w, canvas_h = canvas.winfo_width(), canvas.winfo_height()
        
        if canvas_w < 2 or canvas_h < 2:
            self.root.after(50, lambda: self.display_plate_image(plate_img, canvas))
            return
        
        plate_resized = cv2.resize(plate_img, (canvas_w, canvas_h), interpolation=cv2.INTER_AREA)
        rgb_img = cv2.cvtColor(plate_resized, cv2.COLOR_BGR2RGB)
        img = Image.fromarray(rgb_img)
        photo = ImageTk.PhotoImage(image=img)
        canvas.create_image(0, 0, image=photo, anchor=tk.NW)
        canvas.image = photo

    def clear_plate_image(self, canvas):
        canvas.delete("all")

    def reset_info_panel(self):
        self.active_vehicle_id = None
        
        for key in self.info_vars:
            self.info_vars[key].set(".....")
            
        if self.db.get_active_vehicles_count() == 0:
             self.parking_status["slots_occupied"] = 0
        
        if self.parking_status["slots_occupied"] == 0:
            self.info_vars["Tr·∫°ng Th√°i:"].set("S·∫¥N S√ÄNG - B√£i tr·ªëng")
        elif self.parking_status["is_full"]:
            self.info_vars["Tr·∫°ng Th√°i:"].set("B√ÉI FULL")
        else:
            self.info_vars["Tr·∫°ng Th√°i:"].set(f"S·∫¥N S√ÄNG - {self.parking_status['slots_occupied']}/{self.parking_status['slots_total']} xe")
        
        self.info_vars["T·ªïng Ph√≠:"].set("0 VNƒê")
        self.plate_in_var.set(".....")
        self.plate_out_var.set(".....")
        
        self.clear_plate_image(self.plate_in_canvas)
        self.clear_plate_image(self.plate_out_canvas)

        if hasattr(self, 'btn_barrier_in'):
            if not self.parking_status["barrier_in_open"]:
                self.btn_barrier_in.config(text="M·ªû BARRIER V√ÄO", style='Success.TButton', state=tk.NORMAL)
            else:
                self.btn_barrier_in.config(text="ƒê√ìNG BARRIER V√ÄO", style='Danger.TButton', state=tk.NORMAL)
            
        if hasattr(self, 'btn_barrier_out'):
            if not self.parking_status["barrier_out_open"]:
                self.btn_barrier_out.config(text="M·ªû BARRIER RA", style='Primary.TButton', state=tk.NORMAL)
            else:
                self.btn_barrier_out.config(text="ƒê√ìNG BARRIER RA", style='Danger.TButton', state=tk.NORMAL)

    def show_history(self):
        self.current_screen = "history"
        self.clear_content()
        self.show_user_menu()
        self.release_cameras()
        
        frame = ttk.Frame(self.content_frame)
        frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        filter_frame = ttk.LabelFrame(frame, text="B·ªô l·ªçc")
        filter_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(filter_frame, text="Bi·ªÉn s·ªë:").pack(side=tk.LEFT, padx=5)
        self.hist_plate_entry = ttk.Entry(filter_frame)
        self.hist_plate_entry.pack(side=tk.LEFT, padx=5)
        
        ttk.Label(filter_frame, text="Ng√†y v√†o:").pack(side=tk.LEFT, padx=5)
        self.hist_date_entry = DateEntry(filter_frame, date_pattern='y-mm-dd')
        self.hist_date_entry.pack(side=tk.LEFT, padx=5)
        
        ttk.Button(filter_frame, text="L·ªçc", command=self.load_history_data).pack(side=tk.LEFT, padx=5)
        ttk.Button(filter_frame, text="X√≥a L·ªçc", command=self.clear_history_filter).pack(side=tk.LEFT, padx=5)
        
        tree_frame = ttk.Frame(frame)
        tree_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        cols = ('ID', 'Bi·ªÉn s·ªë', 'RFID', 'V√†o', 'Ra', 'Ph√≠', 'Tr·∫°ng th√°i', 'Payment status', 'NV V√†o', 'NV Ra')
        self.history_tree = ttk.Treeview(tree_frame, columns=cols, show='headings')
        
        for col in cols:
            self.history_tree.heading(col, text=col)
            self.history_tree.column(col, stretch=tk.YES)
        
        self.history_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=self.history_tree.yview)
        self.history_tree.configure(yscroll=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        ttk.Button(frame, text="X√≥a m·ª•c ƒë√£ ch·ªçn", style='Danger.TButton', command=self.delete_history_record).pack(pady=10)
        
        self.load_history_data()

    def load_history_data(self):
        for item in self.history_tree.get_children():
            self.history_tree.delete(item)
        
        plate = self.hist_plate_entry.get()
        date_val = self.hist_date_entry.get()
        date = self.hist_date_entry.get_date().strftime('%Y-%m-%d') if date_val else None
        
        data = self.db.get_history(plate, date)
        for row in data:
            self.history_tree.insert('', tk.END, values=row)

    def clear_history_filter(self):
        self.hist_plate_entry.delete(0, tk.END)
        self.hist_date_entry.set_date(None)
        self.load_history_data()

    def delete_history_record(self):
        selected_item = self.history_tree.focus()
        if not selected_item:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt m·ª•c ƒë·ªÉ x√≥a.")
            return
        
        item_data = self.history_tree.item(selected_item)
        record_id = item_data['values'][0]
        
        if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b·∫£n ghi ID {record_id}?"):
            self.db.delete_history(record_id)
            self.load_history_data()

    def show_staff_management(self):
        self.current_screen = "staff"
        self.clear_content()
        self.show_user_menu()
        self.release_cameras()
        
        frame = ttk.LabelFrame(self.content_frame, text="Qu·∫£n l√Ω nh√¢n s·ª±")
        frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        tree_frame = ttk.Frame(frame)
        tree_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        cols = ('ID', 'Username', 'Full name', 'Role')
        self.staff_tree = ttk.Treeview(tree_frame, columns=cols, show='headings')
        
        for col in cols:
            self.staff_tree.heading(col, text=col)
            self.staff_tree.column(col, stretch=tk.YES)
        
        self.staff_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=self.staff_tree.yview)
        self.staff_tree.configure(yscroll=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        btn_frame = ttk.Frame(frame)
        btn_frame.pack(pady=10)
        
        ttk.Button(btn_frame, text="Add", command=self.add_staff).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="Edit", command=self.edit_staff).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="Delete", command=self.delete_staff).pack(side=tk.LEFT, padx=5)
        
        self.load_staff_data()

    def load_staff_data(self):
        for item in self.staff_tree.get_children():
            self.staff_tree.delete(item)
            
        for user in self.db.get_users():
            self.staff_tree.insert('', tk.END, values=user)

    def _staff_dialog(self, title, record=None):
        dialog = tk.Toplevel(self.root)
        dialog.title(title)
        dialog.transient(self.root)
        dialog.grab_set()
        
        ttk.Label(dialog, text="Username:").grid(row=0, column=0, padx=5, pady=5)
        user_entry = ttk.Entry(dialog)
        user_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(dialog, text="Password:").grid(row=1, column=0, padx=5, pady=5)
        pass_entry = ttk.Entry(dialog, show="*")
        pass_entry.grid(row=1, column=1, padx=5, pady=5)
        
        if record:
            ttk.Label(dialog, text="(Leave blank if no change)").grid(row=1, column=2)
        
        ttk.Label(dialog, text="Full name:").grid(row=2, column=0, padx=5, pady=5)
        name_entry = ttk.Entry(dialog)
        name_entry.grid(row=2, column=1, padx=5, pady=5)
        
        ttk.Label(dialog, text="Role:").grid(row=3, column=0, padx=5, pady=5)
        role_combo = ttk.Combobox(dialog, values=['admin', 'user'], state='readonly')
        role_combo.grid(row=3, column=1, padx=5, pady=5)
        
        if record:
            user_entry.insert(0, record[1])
            name_entry.insert(0, record[2])
            role_combo.set(record[3])
        
        result = {}
        
        def on_ok():
            result['username'] = user_entry.get()
            result['password'] = pass_entry.get()
            result['full_name'] = name_entry.get()
            result['role'] = role_combo.get()
            dialog.destroy()
            
        ok_btn = ttk.Button(dialog, text="OK", command=on_ok)
        ok_btn.grid(row=4, column=0, columnspan=2, pady=10)
        
        dialog.wait_window(dialog)
        return result

    def add_staff(self):
        data = self._staff_dialog("Th√™m nh√¢n vi√™n")
        
        if data and all(data.values()):
            if self.db.add_user(**data):
                self.load_staff_data()
            else:
                messagebox.showerror("L·ªói", "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i.")
        elif data:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ƒëi·ªÅn ƒë·ªß th√¥ng tin.")

    def edit_staff(self):
        selected_item = self.staff_tree.focus()
        if not selected_item:
            return
            
        record = self.staff_tree.item(selected_item)['values']
        user_id = record[0]
        
        data = self._staff_dialog("S·ª≠a nh√¢n vi√™n", record)
        
        if data and data['username'] and data['full_name'] and data['role']:
            if self.db.update_user(user_id, **data):
                self.load_staff_data()
            else:
                messagebox.showerror("L·ªói", "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i.")
        elif data:
            messagebox.showwarning("C·∫£nh b√°o", "T√™n, h·ªç t√™n v√† vai tr√≤ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")

    def delete_staff(self):
        selected_item = self.staff_tree.focus()
        if not selected_item:
            return
            
        record = self.staff_tree.item(selected_item)['values']
        user_id, username = record[0], record[1]
        
        if username == self.current_user['name'] or username == 'admin':
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n admin ho·∫∑c ch√≠nh b·∫°n.")
            return
            
        if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh√¢n vi√™n {username}?"):
            self.db.delete_user(user_id)
            self.load_staff_data()

    def show_revenue_report(self):
        self.current_screen = "revenue"
        self.clear_content()
        self.show_user_menu()
        self.release_cameras()
        
        frame = ttk.LabelFrame(self.content_frame, text="B√°o c√°o doanh thu")
        frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        filter_frame = ttk.Frame(frame)
        filter_frame.pack(pady=20)
        
        ttk.Label(filter_frame, text="T·ª´ ng√†y:").pack(side=tk.LEFT, padx=5)
        self.start_date_entry = DateEntry(filter_frame, date_pattern='y-mm-dd')
        self.start_date_entry.pack(side=tk.LEFT, padx=5)
        
        ttk.Label(filter_frame, text="ƒê·∫øn ng√†y:").pack(side=tk.LEFT, padx=5)
        self.end_date_entry = DateEntry(filter_frame, date_pattern='y-mm-dd')
        self.end_date_entry.pack(side=tk.LEFT, padx=5)
        
        ttk.Button(filter_frame, text="Xem B√°o C√°o", command=self.generate_revenue_report).pack(side=tk.LEFT, padx=10)
        
        self.revenue_var = tk.StringVar(value="T·ªïng doanh thu: 0 VNƒê")
        ttk.Label(frame, textvariable=self.revenue_var, font=('Arial', 24, 'bold'), foreground=self.colors['danger']).pack(pady=30)

    def generate_revenue_report(self):
        start_date = self.start_date_entry.get_date().strftime('%Y-%m-%d')
        end_date = self.end_date_entry.get_date().strftime('%Y-%m-%d')
        total = self.db.get_revenue_report(start_date, end_date)
        self.revenue_var.set(f"T·ªïng doanh thu: {total:,} VNƒê")